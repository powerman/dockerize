name: CI/CD

on:
  push:
    tags: v*
    branches: master
  pull_request:
    branches: master

env:
  GO_VERSION: '1.20.1' # Also in Dockerfile.

jobs:

  test:
    runs-on: 'ubuntu-latest'
    timeout-minutes: 30
    steps:
      - uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}

      - uses: actions/checkout@v3

      - uses: actions/cache@v3
        with:
          path: |
            ~/go/bin
            ~/go/pkg
            ~/go/src
            ~/.cache/go-build
            ~/.cache/golangci-lint
            .buildcache
          key: v4-test-${{ runner.os }}-${{ hashFiles('go.mod') }}
          restore-keys: |
            v4-test-${{ runner.os }}-

      - run: scripts/test

      - name: Report code coverage
        env:
          COVERALLS_TOKEN: ${{ secrets.COVERALLS_TOKEN }}
        if: env.COVERALLS_TOKEN
        run: |
          scripts/cover
          .buildcache/bin/goveralls -coverprofile=cover.out -service=GitHub

  build-and-release:
    needs: test
    runs-on: 'ubuntu-latest'
    timeout-minutes: 30
    if: github.event_name == 'push'
    steps:
      - uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}

      - uses: actions/checkout@v3

      - name: Turnstyle
        uses: softprops/turnstyle@v1
        with:
          poll-interval-seconds: 3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/cache@v3
        with:
          path: |
            ~/go/pkg
            ~/.cache/go-build
          key: v1-build-${{ runner.os }}-${{ hashFiles('go.mod') }}
          restore-keys: |
            v1-build-${{ runner.os }}-

      # Add support for more platforms with QEMU (optional)
      # https://github.com/docker/setup-qemu-action
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Upload to DockerHub Container Registry
        run: |
          docker login -u '${{ secrets.CR_USER }}' -p '${{ secrets.CR_PAT }}'
          if echo "$GITHUB_REF" | grep -q '^refs/tags/v'; then
            TAG="${GITHUB_REF/refs\/tags\/v}"
          else
            TAG="latest"
          fi
          IMAGE_TAG="${{ secrets.CR_USER }}/$(basename ${GITHUB_REPOSITORY,,}):${TAG}"
          docker buildx build \
            --platform linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64/v8,linux/ppc64le,linux/s390x \
            --tag "${IMAGE_TAG}" \
            --push \
            .

      - run: echo -e "$GPG_KEY" | gpg --import
        if: github.ref_type == 'tag'
        env:
          GPG_KEY: ${{ secrets.GPG_KEY }}

      - run: scripts/release
        if: github.ref_type == 'tag'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
