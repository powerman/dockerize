# https://git-cliff.org/docs/configuration
#
# For manual CHANGELOG management tasks:
# - Force release with manual version: edit release PR title.
# - Remove specific commit: add hash to `.cliffignore` file.
# - Fix specific commit: use `postprocessors=` with commit hash.
# - Fix typo in all commits: use `commit_preprocessors=`.
# - Add text for specific released version: use `body=`.

[bump]
# Feature bump minor for 0.x.y version.
features_always_bump_minor = true

# Breaking bump minor for 0.x.y or major otherwise.
breaking_always_bump_major = false

# When set, the version will be set to this value if no tags are found.
initial_tag = 'v0.1.0'

# Configures additional commit types that should increment the major or minor accordingly.
# custom_major_increment_regex = 'bump-major'
# custom_minor_increment_regex = 'bump-minor'

# When set, it forces to always bump in major, minor or patch.
# bump_type = 'minor'

[changelog]
# https://keats.github.io/tera/docs/#introduction

header = """
# Changelog

All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.1.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).
"""

body = """
{%- macro remote_diff_url(from, to) -%}
    https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}/compare/{{ from }}..{{ to }}
{%- endmacro -%}
{%- macro remote_pr_url(id) -%}
    https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}/pull/{{ id }}
{%- endmacro -%}
{%- macro remote_commit_url(id) -%}
    https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}/commit/{{ id }}
{%- endmacro -%}
{%- macro commit(commit) -%}
{% if commit.scope %}**({{ commit.scope }})** {% endif %}\
    {% if commit.breaking %}**‚ö†Ô∏è BREAKING!** {% endif %}\
    {{ commit.message | split(pat="\n") | first | upper_first | trim }} by \
    {% if commit.remote.username %}@{{ commit.remote.username }}
    {%- else %}{{ commit.author.name }}
    {%- endif %} in \
    {% if commit.remote.pr_number -%}
        [#{{ commit.remote.pr_number }}]
    {%- else -%}
        [{{ commit.id | truncate(length=7, end="") }}]
    {%- endif %}
{%- endmacro -%}

{%- if version %}
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}
    ## [Unreleased]
{% endif -%}

{#- Example: Add custom content to specific version -#}
{#-
{%- if version and version is matching("v1.2.3") %}
### üêõ Fixed (post-release)

- Critical issue discovered after release
{% endif -%}
-#}

{%- for group, commits in commits | group_by(attribute="group") %}
    {%- if group is not matching("Chore|Testing") %}
        ### {{ group | striptags | trim }}

        {% for commit in commits | filter(attribute="scope") | sort(attribute="scope") -%}
            - {{ self::commit(commit=commit) }}
        {% endfor -%}
        {% for commit in commits -%}
            {%- if not commit.scope -%}
                - {{ self::commit(commit=commit) }}
            {% endif -%}
        {% endfor -%}
    {%- endif -%}
{%- endfor -%}

{#- TEMPORARY DISABLED because of unreliable is_first_time flag:
    https://github.com/orhun/git-cliff/issues/1096#issuecomment-2972964855

{%- set contributors = github.contributors | filter(attribute="is_first_time", value=true) -%}
{%- if contributors | length != 0 %}
    ### New Contributors

    {% for contributor in contributors -%}
        - @{{ contributor.username }} made their first contribution
            {%- if contributor.pr_number and contributor.pr_title is not starting_with("chore: release") %} in \
                [#{{ contributor.pr_number }}]({{ self::remote_pr_url(id=contributor.pr_number) }})
            {%- endif %}
    {% endfor -%}
{%- endif -%}

-#}

{% if version %}
    [{{ version | trim_start_matches(pat="v") }}]: \
    {% if previous.version -%}
        {{ self::remote_diff_url(from=previous.version, to=version) }}
    {%- else -%}
        {{ self::remote_diff_url(from="%40%7B10year%7D", to=version) }}
    {%- endif %}
{% else %}
    [Unreleased]: \
    {% if previous.version -%}
        {{ self::remote_diff_url(from=previous.version, to="HEAD") }}
    {%- else -%}
        {{ self::remote_diff_url(from="%40%7B10year%7D", to="HEAD") }}
    {%- endif %}
{% endif -%}
{% for commit in commits -%}
  {%- if commit.group is not matching("Chore|Testing") -%}
    {% if commit.remote.pr_number -%}
        [#{{ commit.remote.pr_number }}]: {{ self::remote_pr_url(id=commit.remote.pr_number) }}
    {%- else -%}
        [{{ commit.id | truncate(length=7, end="") }}]: {{ self::remote_commit_url(id=commit.id) }}
    {%- endif %}
  {% endif -%}
{% endfor -%}
"""

footer = """

<!-- generated by git-cliff -->
"""

# Remove the leading and trailing whitespace from the templates.
trim = true

# Render body even when there are no releases to process.
# render_always = true

# Manual fixes before output.
# https://git-cliff.org/docs/configuration/git#commit_preprocessors
#
# Fix release date.
# [[changelog.postprocessors]]
# pattern = '\n## \[1.2.3\] - 2025-05-02'
# replace = "\n## [1.2.3] - 2025-05-01"
#
# Fix a specific commit description by hash
# [[changelog.postprocessors]]
# pattern = '- Wrong description (by @author in \[abc1234\])'
# replace = '- Correct description $1'

[git]
# Parse the commits based on https://www.conventionalcommits.org.
conventional_commits = true

# Do not filter out the commits that are not conventional.
filter_unconventional = false

# Do not fail changelog generation on unconventional commits.
require_conventional = false

# Do not process each line of a commit as an individual commit.
split_commits = false

# An array of commit preprocessors for manipulating the commit messages before
# parsing/grouping them.
# https://git-cliff.org/docs/configuration/git#commit_preprocessors
commit_preprocessors = [
  # Fix global typos in commit messages.
  # { pattern = 'teh ', replace = 'the ' },
  # { pattern = 'recieve', replace = 'receive' },
  { pattern = 'compatiblity', replace = 'compatibility' },
  { pattern = ' windows', replace = ' Windows' },
  # Fix spelling in commits with https://github.com/crate-ci/typos.
  # { pattern = '.*', replace_command = 'typos --write-changes -' },
  # Replace multiple spaces with a single space.
  { pattern = '  +', replace = ' ' },
  # Remove issue numbers from commits.
  { pattern = '\((\w+\s)?#([0-9]+)\)', replace = '' },
  # Escape <key> to ensure it won't be processed as <tag>.
  { pattern = '(<[^>]+>)$', replace = '`${1}`' },
]

# An array of commit parsers for determining the commit groups by using regex. The entire
# commit messages are affected wherever the regex is matched.
# https://git-cliff.org/docs/configuration/git#commit_parsers
commit_parsers = [
  { message = '^chore: release', skip = true },
  { message = '^Merge ', skip = true },
  { message = '^(feat|fix)\((test|ci|build)\)', group = '<!-- X -->‚öôÔ∏è Chore' },
  { message = '^(fix|chore)\(deps\)', group = '<!-- 8 -->üì¶Ô∏è Dependencies' },
  # { message = '^[^:]*!:', group = '<!-- 0 -->‚ö†Ô∏è Breaking Change!' },
  { message = '^fix\(security\)', group = '<!-- 0 -->üõ°Ô∏è Security' },
  { message = '^fix.* [Vv]ulnerabilit', group = '<!-- 0 -->üõ°Ô∏è Security' },
  { message = '^fix.* [Ss]ecur', group = '<!-- 0 -->üõ°Ô∏è Security' },
  { message = '^fix.* CVE', group = '<!-- 0 -->üõ°Ô∏è Security' },
  { message = '^feat.*: [Rr]emove', group = '<!-- 1 -->‚ûñ Removed' },
  { message = '^feat.*: [Dd]elete', group = '<!-- 1 -->‚ûñ Removed' },
  { message = '^feat.*: [Dd]rop', group = '<!-- 1 -->‚ûñ Removed' },
  { message = '^(Revert|Reapply) "(feat|fix)', group = '<!-- 1 -->‚óÄÔ∏è Revert' },
  { message = '^feat.* [Dd]eprecat', group = '<!-- 2 -->‚ùå Deprecated' },
  { message = '^feat.*: [Aa]dd', group = '<!-- 3 -->üöÄ Added' },
  { message = '^feat.*: [Ii]mplement', group = '<!-- 3 -->üöÄ Added' },
  { message = '^feat.*: [Ss]upport', group = '<!-- 3 -->üöÄ Added' },
  { message = '^feat', group = '<!-- 4 -->üîî Changed' },
  { message = '^fix', group = '<!-- 5 -->üêõ Fixed' },
  { message = '^perf', group = '<!-- 6 -->‚ö° Performance' },
  { message = '^docs', group = '<!-- 7 -->üìö Documentation' },
  { message = '^build', group = '<!-- X -->‚öôÔ∏è Chore' },
  { message = '^chore', group = '<!-- X -->‚öôÔ∏è Chore' },
  { message = '^ci', group = '<!-- X -->‚öôÔ∏è Chore' },
  { message = '^refactor', group = '<!-- X -->‚öôÔ∏è Chore' },
  { message = '^test', group = '<!-- Z -->üß™ Testing' },
  { message = '.', group = '<!-- 4 -->üîî Changed' },
]

# Any breaking changes is protected against being skipped due to any commit parser.
protect_breaking_commits = true

# Do not filter out the commits that are not matched by commit parsers.
filter_commits = false

# A regular expression for matching the git tags.
# tag_pattern = '^v[0-9]'

# Skip processing (drop commits from the changelog) the matched tags.
skip_tags = 'v0.1.0'

# Ignore processing the matched tags (but include ignored commits into the next tag).
ignore_tags = '-'

# Counting in (an inverted version of ignore_tags) the matched tags in the final result.
# count_tags = '-beta'

# Process tags in chronological order instead of topological order.
topo_order = false

# Sort the commits inside sections by oldest/newest order.
sort_commits = 'oldest'

# Link parsers for extracting external references, and turning them into URLs, using regex.
# These extracted links can be used in the template with commits.links variable.
link_parsers = [
  # { pattern = "#(\\d+)", href = "https://github.com/USER/REPO/issues/$1"},
  # { pattern = "RFC(\\d+)", text = "ietf-rfc$1", href = "https://datatracker.ietf.org/doc/html/rfc$1"},
]

# Limits the number of included commits in the generated changelog.
# limit_commits = 42
