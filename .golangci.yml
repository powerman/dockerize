# This file contains all available configuration options
# with their default values (in comments).

# Options for analysis running.
run:
  # The default concurrency value is the number of available CPU.
  #concurrency: 4

  # Timeout for analysis, e.g. 30s, 5m.
  # Default: 1m
  #timeout: 1m

  # Exit code when at least one issue was found.
  # Default: 1
  #issues-exit-code: 1

  # Include test files or not.
  # Default: true
  #tests: true

  # List of build tags, all linters use it.
  # Default: [].
  #build-tags:

  # Which dirs to skip: issues from them won't be reported.
  # Can use regexp here: `generated.*`, regexp is applied on full path.
  # Default value is empty list,
  # but default dirs are skipped independently of this option's value (see skip-dirs-use-default).
  # "/" will be replaced by current OS file path separator to properly work on Windows.
  skip-dirs:
    #- old

  # Enables skipping of directories:
  # - vendor$, third_party$, testdata$, examples$, Godeps$, builtin$
  # Default: true
  #skip-dirs-use-default: true

  # Which files to skip: they will be analyzed, but issues from them won't be reported.
  # Default value is empty list,
  # but there is no need to include all autogenerated files,
  # we confidently recognize autogenerated files.
  # If it's not please let us know.
  # "/" will be replaced by current OS file path separator to properly work on Windows.
  skip-files:
    - "\\.[\\w-]+\\.go$"

  # If set we pass it to "go list -mod={option}". From "go help modules":
  # If invoked with -mod=readonly, the go command is disallowed from the implicit
  # automatic updating of go.mod described above. Instead, it fails when any changes
  # to go.mod are needed. This setting is most useful to check that go.mod does
  # not need updates, such as in a continuous integration and testing system.
  # If invoked with -mod=vendor, the go command assumes that the vendor
  # directory holds the correct copies of dependencies and ignores
  # the dependency descriptions in go.mod.
  #
  # Allowed values: readonly|vendor|mod
  # By default, it isn't set.
  modules-download-mode: readonly

  # Allow multiple parallel golangci-lint instances running.
  # If false (default) - golangci-lint acquires file lock on start.
  #allow-parallel-runners: false

  # Define the Go version limit.
  # Mainly related to generics support in go1.18.
  # Default: use Go version from the go.mod file, fallback on the env var `GOVERSION`, fallback on 1.17
  #go: '1.18'


# output configuration options
output:
  # Format: colored-line-number|line-number|json|tab|checkstyle|code-climate|junit-xml|github-actions
  #
  # Multiple can be specified by separating them by comma, output can be provided
  # for each of them by separating format name and path by colon symbol.
  # Output path can be either `stdout`, `stderr` or path to the file to write to.
  # Example: "checkstyle:report.json,colored-line-number"
  #
  # Default: colored-line-number
  #format: colored-line-number

  # Print lines of code with issue.
  # Default: true
  #print-issued-lines: true

  # Print linter name in the end of issue text.
  # Default: true
  #print-linter-name: true

  # Make issues output unique by line.
  # Default: true
  #uniq-by-line: true

  # Add a prefix to the output file references.
  # Default is no prefix.
  #path-prefix: ""

  # Sort results by: filepath, line and column.
  sort-results: false


# All available settings of specific linters.
linters-settings:
  bidichk:
    # The following configurations check for all mentioned invisible unicode runes.
    # All runes are enabled by default.
    #left-to-right-embedding: false
    #right-to-left-embedding: false
    #pop-directional-formatting: false
    #left-to-right-override: false
    #right-to-left-override: false
    #left-to-right-isolate: false
    #right-to-left-isolate: false
    #first-strong-isolate: false
    #pop-directional-isolate: false

  cyclop:
    # The maximal code complexity to report.
    max-complexity: 15
    # The maximal average package complexity.
    # If it's higher than 0.0 (float) the check is enabled
    # Default: 0.0
    #package-average: 0.0
    # Should ignore tests.
    # Default: false
    #skip-tests: false

  decorder:
    # Required order of `type`, `const`, `var` and `func` declarations inside a file.
    # Default: types before constants before variables before functions.
    #dec-order:
    #  - type
    #  - const
    #  - var
    #  - func

    # If true, order of declarations is not checked at all.
    # Default: true (disabled)
    #disable-dec-order-check: true

    # If true, `init` func can be anywhere in file (does not have to be declared before all other functions).
    # Default: true (disabled)
    disable-init-func-first-check: false

    # If true, multiple global `type`, `const` and `var` declarations are allowed.
    # Default: true (disabled)
    #disable-dec-num-check: true

  depguard:
    # Kind of list is passed in.
    # Allowed values: allowlist|denylist
    # Default: denylist
    #list-type: denylist

    # Check the list against standard lib.
    # Default: false
    include-go-root: true

    # A list of packages for the list type specified.
    # Default: []
    packages:
      #- log
      - github.com/go-errors/errors
      - github.com/pkg/errors
      - github.com/prometheus/client_golang/prometheus/promauto
      - github.com/prometheus/common/log
      - github.com/golang/protobuf

    # A list of packages for the list type specified.
    # Specify an error message to output when a denied package is used.
    # Default: []
    packages-with-error-message:
      #- log: "logging is allowed only by github.com/powerman/structlog"

    # Create additional guards that follow the same configuration pattern.
    # Results from all guards are aggregated together.
    #additional-guards:
    #  - list-type: denylist
    #    include-go-root: false
    #    packages:
    #      - github.com/stretchr/testify
    #    # Specify rules by which the linter ignores certain files for consideration.
    #    ignore-file-rules:
    #      - "**/*_test.go"
    #      - "**/mock/**/*.go"

  dogsled:
    # Checks assignments with too many blank identifiers.
    # Default: 2
    #max-blank-identifiers: 2

  dupl:
    # Tokens count to trigger issue.
    # Default: 150
    threshold: 100

  errcheck:
    # Report about not checking of errors in type assertions: `a := b.(MyStruct)`.
    # Such cases aren't reported by default.
    # Default: false
    #check-type-assertions: false

    # report about assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`.
    # Such cases aren't reported by default.
    # Default: false
    #check-blank: false

    # DEPRECATED comma-separated list of pairs of the form pkg:regex
    #
    # the regex is used to ignore names within pkg. (default "fmt:.*").
    # see https://github.com/kisielk/errcheck#the-deprecated-method for details
    #ignore: fmt:.*,io/ioutil:^Read.*

    # To disable the errcheck built-in exclude list.
    # See `-excludeonly` option in https://github.com/kisielk/errcheck#excluding-functions for details.
    # Default: false
    #disable-default-exclusions: false

    # DEPRECATED use exclude-functions instead.
    #
    # Path to a file containing a list of functions to exclude from checking.
    # See https://github.com/kisielk/errcheck#excluding-functions for details.
    #exclude: .errcheck.excludes

    # List of functions to exclude from checking, where each entry is a single function to exclude.
    # See https://github.com/kisielk/errcheck#excluding-functions for details.
    exclude-functions:
      - encoding/json.Marshal
      - encoding/json.MarshalIndent
    #  - io/ioutil.ReadFile
    #  - io.Copy(*bytes.Buffer)
    #  - io.Copy(os.Stdout)

  errchkjson:
    # With check-error-free-encoding set to true, errchkjson does warn about errors
    # from json encoding functions that are safe to be ignored,
    # because they are not possible to happen.
    #
    # if check-error-free-encoding is set to true and errcheck linter is enabled,
    # it is recommended to add the following exceptions to prevent from false positives:
    #
    #     linters-settings:
    #       errcheck:
    #         exclude-functions:
    #           - encoding/json.Marshal
    #           - encoding/json.MarshalIndent
    #
    # Default: false
    check-error-free-encoding: true

    # Issue on struct encoding that doesn't have exported fields.
    # Default: false
    report-no-exported: true

  errorlint:
    # Check whether fmt.Errorf uses the %w verb for formatting errors.
    # See the https://github.com/polyfloyd/go-errorlint for caveats.
    # Default: true
    #errorf: true
    # Check for plain type assertions and type switches.
    # Default: true
    #asserts: true
    # Check for plain error comparisons.
    # Default: true
    #comparison: true

  exhaustive:
    # Check switch statements in generated files also.
    # Default: false
    #check-generated: false
    # Presence of "default" case in switch statements satisfies exhaustiveness,
    # even if all enum members are not listed.
    # Default: false
    #default-signifies-exhaustive: false
    # Enum members matching the supplied regex do not have to be listed in
    # switch statements to satisfy exhaustiveness.
    # Default: ""
    #ignore-enum-members: "Example.+"
    # Consider enums only in package scopes, not in inner scopes.
    # Default: false
    #package-scope-only: false

  exhaustivestruct:
    # Struct Patterns is list of expressions to match struct packages and names.
    # The struct packages have the form `example.com/package.ExampleStruct`.
    # The matching patterns can use matching syntax from https://pkg.go.dev/path#Match.
    # If this list is empty, all structs are tested.
    struct-patterns:
      - example.com/package.ExampleStruct

  forbidigo:
    # Forbid the following identifiers (list of regexp).
    forbid:
      - ^print(ln)?$
      # Optionally put comments at the end of the regex, surrounded by `(# )?`
      # Escape any special characters.
      #- 'fmt\.Print.*(# Do not commit print statements\.)?'
    # Exclude godoc examples from forbidigo checks.
    # Default: true
    exclude_godoc_examples: false

  funlen:
    # Checks the number of lines in a function.
    # If lower than 0, disable the check.
    # Default: 60
    #lines: 60
    # Checks the number of statements in a function.
    # If lower than 0, disable the check.
    # Default: 40
    #statements: 40

  gci:
    # DEPRECATED: use `sections` and `prefix(github.com/org/project)` instead.
    #local-prefixes: github.com/org/project

    # Checks that no inline Comments are present.
    # Default: false
    #no-inline-comments: false

    # Checks that no prefix Comments(comment lines above an import) are present.
    # Default: false
    #no-prefix-comments: false

    # Section configuration to compare against.
    # Section names are case-insensitive and may contain parameters in ().
    # Default: ["standard", "default"]
    sections:
     - standard                       # Captures all standard packages if they do not match another section.
     - default                        # Contains all imports that could not be matched to another section type.
     - prefix(github.com/powerman/dockerize) # Groups all imports with the specified Prefix.
    #  - comment(your text here)        # Prints the specified indented comment.
    #  - newLine                        # Prints an empty line

    # Separators that should be present between sections.
    # Default: ["newLine"]
    #section-separators:
    #  - newLine

  gocognit:
    # Minimal code complexity to report
    # Default: 30 (but we recommend 10-20)
    min-complexity: 20

  goconst:
    # Minimal length of string constant.
    # Default: 3
    #min-len: 3
    # Minimum occurrences of constant string count to trigger issue.
    # Default: 3
    #min-occurrences: 3
    # Ignore test files.
    # Default: false
    ignore-tests: true
    # Look for existing constants matching the values.
    # Default: true
    #match-constant: true
    # Search also for duplicated numbers.
    # Default: false
    #numbers: false
    # Minimum value, only works with goconst.numbers
    # Default: 3
    #min: 3
    # Maximum value, only works with goconst.numbers
    # Default: 3
    #max: 3
    # Ignore when constant is not used as function argument.
    # Default: true
    #ignore-calls: true

  gocritic:
    # Which checks should be enabled; can't be combined with 'disabled-checks'.
    # See https://go-critic.github.io/overview#checks-overview.
    # To check which checks are enabled run `GL_DEBUG=gocritic golangci-lint run`.
    # By default, list of stable checks is used.
    #enabled-checks:
    #  - nestingReduce
    #  - unnamedResult
    #  - ruleguard
    #  - truncateCmp

    # Which checks should be disabled; can't be combined with 'enabled-checks'.
    # Default: []
    disabled-checks:
      - exposedSyncMutex # questionable
      - hugeParam        # premature optimization
      - paramTypeCombine # questionable
      - switchTrue       # questionable
      - yodaStyleExpr    # questionable

    # Enable multiple checks by tags, run `GL_DEBUG=gocritic golangci-lint run` to see all tags and checks.
    # See https://github.com/go-critic/go-critic#usage -> section "Tags".
    # Default: []
    enabled-tags:
      - diagnostic
      - style
      - performance
      - experimental
      - opinionated
    #disabled-tags:
    #  - diagnostic
    #  - style
    #  - performance
    #  - experimental
    #  - opinionated

    # Settings passed to gocritic.
    # The settings key is the name of a supported gocritic checker.
    # The list of supported checkers can be find in https://go-critic.github.io/overview.
    settings:
      # Must be valid enabled check name.
      captLocal:
        # Whether to restrict checker to params only.
        # Default: true
        paramsOnly: false
      elseif:
        # Whether to skip balanced if-else pairs.
        # Default: true
        #skipBalanced: true
      hugeParam:
        # Size in bytes that makes the warning trigger.
        # Default: 80
        #sizeThreshold: 80
      nestingReduce:
        # Min number of statements inside a branch to trigger a warning.
        # Default: 5
        #bodyWidth: 5
      rangeExprCopy:
        # Size in bytes that makes the warning trigger.
        # Default: 512
        #sizeThreshold: 512
        # Whether to check test functions
        # Default: true
        #skipTestFuncs: true
      rangeValCopy:
        # Size in bytes that makes the warning trigger.
        # Default: 128
        #sizeThreshold: 128
        # Whether to check test functions.
        # Default: true
        #skipTestFuncs: true
      ruleguard:
        # Enable debug to identify which 'Where' condition was rejected.
        # The value of the parameter is the name of a function in a ruleguard file.
        #
        # When a rule is evaluated:
        # If:
        #   The Match() clause is accepted; and
        #   One of the conditions in the Where() clause is rejected,
        # Then:
        #   ruleguard prints the specific Where() condition that was rejected.
        #
        # The flag is passed to the ruleguard 'debug-group' argument.
        #debug: 'emptyDecl'
        # Deprecated, use 'failOn' param.
        # If set to true, identical to failOn='all', otherwise failOn=''
        #failOnError: false
        # Determines the behavior when an error occurs while parsing ruleguard files.
        # If flag is not set, log error and skip rule files that contain an error.
        # If flag is set, the value must be a comma-separated list of error conditions.
        # - 'all':    fail on all errors.
        # - 'import': ruleguard rule imports a package that cannot be found.
        # - 'dsl':    gorule file does not comply with the ruleguard DSL.
        failOn: all
        # Comma-separated list of file paths containing ruleguard rules.
        # If a path is relative, it is relative to the directory where the golangci-lint command is executed.
        # The special '${configDir}' variable is substituted with the absolute directory containing the golangci config file.
        # Glob patterns such as 'rules-*.go' may be specified.
        #rules: '${configDir}/build/gorules/rules.go' # Run `golangci-lint cache clean` when it changes!
      tooManyResultsChecker:
        # Maximum number of results.
        # Default: 5
        #maxResults: 5
      truncateCmp:
        # Whether to skip int/uint/uintptr types.
        # Default: true
        skipArchDependent: false
      underef:
        # Whether to skip (*x).method() calls where x is a pointer receiver.
        # Default: true
        skipRecvDeref: false
      unnamedResult:
        # Whether to check exported functions.
        checkExported: true

  gocyclo:
    # Minimal code complexity to report.
    # Default: 30 (but we recommend 10-20)
    min-complexity: 15

  godot:
    # Comments to be checked: `declarations`, `toplevel`, or `all`.
    # Default: declarations
    #scope: declarations
    # List of regexps for excluding particular comment lines from check.
    exclude:
      - ':$'
    # Check that each sentence ends with a period.
    # Default: true
    #period: true
    # Check that each sentence starts with a capital letter.
    # Default: false
    #capital: false

  godox:
    # Report any comments starting with keywords, this is useful for TODO or FIXME comments that
    # might be left in the code accidentally and should be resolved before merging.
    # Default: TODO, BUG, and FIXME.
    keywords:
      - BUG   # marks issues that should be moved to issue tracker before merging
      - FIXME # marks issues that should be resolved before merging
      - DEBUG # marks temporary code that should be removed before merging

  gofmt:
    # Simplify code: gofmt with `-s` option.
    # Default: true
    #simplify: true

  gofumpt:
    # Select the Go version to target.
    # Default: 1.15
    lang-version: "1.18"

    # Module path which contains the source code being formatted.
    # Default: empty string
    #module-path: github.com/org/project

    # Choose whether to use the extra rules.
    # Default: false
    #extra-rules: false

  goheader:
    # Supports two types 'const` and `regexp`.
    # Values can be used recursively.
    values:
      const:
        # Define here const type values in format k:v.
        # For example:
        #COMPANY: MY COMPANY
      regexp:
        # Define here regexp type values.
        # for example:
        #AUTHOR: .*@mycompany\.com
    # The template use for checking.
    template: # |-
      # Put here copyright header template for source code files
      # For example:
      # Note: {{ YEAR }} is a builtin value that returns the year relative to the current machine time.
      #
      #    {{ AUTHOR }} {{ COMPANY }} {{ YEAR }}
      #    SPDX-License-Identifier: Apache-2.0

      #    Licensed under the Apache License, Version 2.0 (the "License");
      #    you may not use this file except in compliance with the License.
      #    You may obtain a copy of the License at:

      #      http://www.apache.org/licenses/LICENSE-2.0

      #    Unless required by applicable law or agreed to in writing, software
      #    distributed under the License is distributed on an "AS IS" BASIS,
      #    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      #    See the License for the specific language governing permissions and
      #    limitations under the License.

    # As alternative of directive 'template', you may put the path to file with the template source.
    # Useful if you need to load the template from a specific file.
    #template-path: /path/to/my/template.tmpl

  goimports:
    # Put imports beginning with prefix after 3rd-party packages.
    # It's a comma-separated list of prefixes.
    local-prefixes: github.com/powerman/dockerize

  golint:
    # Minimal confidence for issues.
    # Default: 0.8
    #min-confidence: 0.8

  gomnd:
    # List of enabled checks, see https://github.com/tommy-muehle/go-mnd/#checks for description.
    checks:
      - argument
      - case
      - condition
      - operation
      - return
      - assign
    # List of numbers to exclude from analysis.
    # The numbers should be written as string.
    # Values always ignored: "1", "1.0", "0" and "0.0"
    #ignored-numbers:
    #  - '0666'
    #  - '0755'
    #  - '42'
    # List of file patterns to exclude from analysis.
    # Values always ignored: `.+_test.go`
    #ignored-files:
    #  - 'magic1_.*.go'
    # List of function patterns to exclude from analysis.
    # Values always ignored: `time.Time`
    #ignored-functions:
    #  - 'math.*'
    #  - 'http.StatusText'

  gomoddirectives:
    # Allow local `replace` directives.
    replace-local: false
    # List of allowed `replace` directives.
    # Default: []
    #replace-allow-list:
    #  - launchpad.net/gocheck
    # Allow to not explain why the version has been retracted in the `retract` directives.
    # Default: false
    #retract-allow-no-explanation: false
    # Forbid the use of the `exclude` directives.
    # Default: false
    #exclude-forbidden: false

  gomodguard:
    allowed:
      # List of allowed modules.
      modules:
        # - gopkg.in/yaml.v2
      # List of allowed module domains.
      domains:
        # - golang.org
    blocked:
      # List of blocked modules.
      modules:
        # Blocked module.
        #- github.com/uudashr/go-module:
            # Recommended modules that should be used instead. (Optional)
            #recommendations:
            #  - golang.org/x/mod
            # Reason why the recommended module should be used. (Optional)
            #reason: "`mod` is the official go.mod parser library."
      # List of blocked module version constraints.
      versions:
        # Blocked module with version constraint.
        - github.com/cenkalti/backoff:
            # Version constraint, see https://github.com/Masterminds/semver#basic-comparisons.
            version: "< 4.0.0"
            # Reason why the version constraint exists. (Optional)
            reason: "we use v4"
      # Set to true to raise lint issues for packages that are loaded from a local path via replace directive.
      local_replace_directives: false

  gosimple:
    # Select the Go version to target.
    # Default: 1.13
    go: "1.18"
    # https://staticcheck.io/docs/options#checks
    checks: [ "all" ]

  gosec:
    # To select a subset of rules to run.
    # Available rules: https://github.com/securego/gosec#available-rules
    includes:
      #- G401
      #- G306
      #- G101

    # To specify a set of rules to explicitly exclude.
    # Available rules: https://github.com/securego/gosec#available-rules
    excludes:
      #- G204

    # Exclude generated files
    # Default: false
    exclude-generated: true

    # Filter out the issues with a lower severity than the given value.
    # Valid options are: low, medium, high.
    # Default: low
    #severity: low

    # Filter out the issues with a lower confidence than the given value.
    # Valid options are: low, medium, high.
    # Default: low
    #confidence: low

    # Concurrency value.
    # Default: the number of logical CPUs usable by the current process.
    #concurrency: 12

    # To specify the configuration of rules.
    # The configuration of rules is not fully documented by gosec:
    # https://github.com/securego/gosec#configuration
    # https://github.com/securego/gosec/blob/569328eade2ccbad4ce2d0f21ee158ab5356a5cf/rules/rulelist.go#L60-L102
    config:
      #G306: "0600"
      #G101:
      #  pattern: "(?i)example"
      #  ignore_entropy: false
      #  entropy_threshold: "80.0"
      #  per_char_threshold: "3.0"
      #  truncate: "32"

  govet:
    # Report about shadowed variables.
    # Default: false
    check-shadowing: true

    # Settings per analyzer.
    settings:
      # Analyzer name, run `go tool vet help` to see all analyzers.
      printf:
        # Run `go tool vet help printf` to see available settings for `printf` analyzer.
        funcs:
          #- (github.com/golangci/golangci-lint/pkg/logutils.Log).Infof
          #- (github.com/golangci/golangci-lint/pkg/logutils.Log).Warnf
          #- (github.com/golangci/golangci-lint/pkg/logutils.Log).Errorf
          #- (github.com/golangci/golangci-lint/pkg/logutils.Log).Fatalf

    # Disable all analyzers.
    # Default: false
    #disable-all: false
    # Enable analyzers by name.
    # Run `go tool vet help` to see all analyzers.
    #enable:
    #   - atomicalign

    # Enable all analyzers.
    # Default: false
    enable-all: true
    # Disable analyzers by name.
    # Run `go tool vet help` to see all analyzers.
    disable:
      - fieldalignment
      #- shadow

  grouper:
    # Require the use of a single global 'const' declaration only.
    # Default: false
    #const-require-single-const: false
    # Require the use of grouped global 'const' declarations.
    # Default: false
    #const-require-grouping: false

    # Require the use of a single 'import' declaration only.
    # Default: false
    import-require-single-import: true
    # Require the use of grouped 'import' declarations.
    # Default: false
    #import-require-grouping: false

    # Require the use of a single global 'type' declaration only.
    # Default: false
    #type-require-single-type: false
    # Require the use of grouped global 'type' declarations.
    # Default: false
    #type-require-grouping: false

    # Require the use of a single global 'var' declaration only.
    # Default: false
    #var-require-single-var: false
    # Require the use of grouped global 'var' declarations.
    # Default: false
    #var-require-grouping: false

  ifshort:
    # Maximum length of variable declaration measured in number of lines, after which linter won't suggest using short syntax.
    # Has higher priority than max-decl-chars.
    # Default: 1
    #max-decl-lines: 1
    # Maximum length of variable declaration measured in number of characters, after which linter won't suggest using short syntax.
    # Default: 30
    #max-decl-chars: 30

  importas:
    # Do not allow unaliased imports of aliased packages.
    # Default: false
    #no-unaliased: false
    # Do not allow non-required aliases.
    # Default: false
    #no-extra-aliases: false
    # List of aliases
    alias:
      # Using `servingv1` alias for `knative.dev/serving/pkg/apis/serving/v1` package.
      #- pkg: knative.dev/serving/pkg/apis/serving/v1
      #  alias: servingv1
      # Using `autoscalingv1alpha1` alias for `knative.dev/serving/pkg/apis/autoscaling/v1alpha1` package.
      #- pkg: knative.dev/serving/pkg/apis/autoscaling/v1alpha1
      #  alias: autoscalingv1alpha1
      # You can specify the package path by regular expression,
      # and alias by regular expression expansion syntax like below.
      # see https://github.com/julz/importas#use-regular-expression for details
      #- pkg: knative.dev/serving/pkg/apis/(\w+)/(v[\w\d]+)
      #  alias: $1$2
      - pkg: net/url
        alias: urlpkg

  ireturn:
    # ireturn allows using `allow` and `reject` settings at the same time.
    # Both settings are lists of the keywords and regular expressions matched to interface or package names.
    # keywords:
    # - `empty` for `interface{}`
    # - `error` for errors
    # - `stdlib` for standard library
    # - `anon` for anonymous interfaces

    # By default, it allows using errors, empty interfaces, anonymous interfaces,
    # and interfaces provided by the standard library.
    allow:
      - anon
      - error
      - empty
      - stdlib
      # You can specify idiomatic endings for interface
      #- (or|er)$

    # reject-list of interfaces
    reject:
      #- github.com\/user\/package\/v4\.Type

  lll:
    # Max line length, lines longer will be reported.
    # '\t' is counted as 1 character by default, and can be changed with the tab-width option.
    # Default: 120.
    #line-length: 120
    # Tab width in spaces.
    # Default: 1
    #tab-width: 1

  maintidx:
    # Show functions with maintainability index lower than N.
    # A high index indicates better maintainability (it's kind of the opposite of complexity).
    # Default: 20
    #under: 20

  makezero:
    # Allow only slices initialized with a length of zero.
    # Default: false
    #always: false

  maligned:
    # Print struct with more effective memory layout or not.
    # Default: false
    suggest-new: true

  misspell:
    # Correct spellings using locale preferences for US or UK.
    # Setting locale to US will correct the British spelling of 'colour' to 'color'.
    # Default is to use a neutral variety of English.
    #locale: US
    #ignore-words:
    #   - someword

  nakedret:
    # Make an issue if func has more lines of code than this setting, and it has naked returns.
    # Default: 30
    #max-func-lines: 30

  nestif:
    # Minimal complexity of if statements to report.
    # Default: 5
    min-complexity: 4

  nilnil:
    # Checks that there is no simultaneous return of `nil` error and an invalid value.
    # Default: ptr, func, iface, map, chan
    #checked-types:
    #  - ptr
    #  - func
    #  - iface
    #  - map
    #  - chan

  nlreturn:
    # Size of the block (including return statement that is still "OK")
    # so no return split required.
    # Default: 1
    #block-size: 1

  nolintlint:
    # Disable to ensure that all nolint directives actually have an effect.
    # Default: false
    #allow-unused: false
    # Disable to ensure that nolint directives don't have a leading space.
    # Default: true
    allow-leading-space: false
    # Exclude following linters from requiring an explanation.
    # Default: []
    #allow-no-explanation: []
    # Enable to require an explanation of nonzero length after each nolint directive.
    # Default: false
    require-explanation: true
    # Enable to require nolint directives to mention the specific linter being suppressed.
    # Default: false
    require-specific: true

  prealloc:
    # IMPORTANT: we don't recommend using this linter before doing performance profiling.
    # For most programs usage of prealloc will be a premature optimization.

    # Report pre-allocation suggestions only on simple loops that have no returns/breaks/continues/gotos in them.
    # Default: true
    #simple: true
    # Report pre-allocation suggestions on range loops.
    # Default: true
    #range-loops: true
    # Report pre-allocation suggestions on for loops.
    # Default: false
    #for-loops: false

  predeclared:
    # Comma-separated list of predeclared identifiers to not report on.
    # Default: ""
    #ignore: ""
    # Include method names and field names (i.e., qualified names) in checks.
    # Default: false
    #q: false

  promlinter:
    # Promlinter cannot infer all metrics name in static analysis.
    # Enable strict mode will also include the errors caused by failing to parse the args.
    # Default: false
    #strict: false
    # Please refer to https://github.com/yeya24/promlinter#usage for detailed usage.
    disabled-linters:
    #  - "Help"
    #  - "MetricUnits"
    #  - "Counter"
    #  - "HistogramSummaryReserved"
    #  - "MetricTypeInName"
    #  - "ReservedChars"
    #  - "CamelCase"
    #  - "lintUnitAbbreviations"

  revive:
    # Maximum number of open files at the same time.
    # See https://github.com/mgechev/revive#command-line-flags
    # Defaults to unlimited.
    #max-open-files: 2048

    # When set to false, ignores files with "GENERATED" header, similar to golint.
    # See https://github.com/mgechev/revive#available-rules for details.
    # Default: false
    ignore-generated-header: true

    # Sets the default severity.
    # See https://github.com/mgechev/revive#configuration
    # Default: warning
    #severity: warning

    # Enable all available rules.
    # Default: false
    #enable-all-rules: false

    # Sets the default failure confidence.
    # This means that linting errors with less than 0.8 confidence will be ignored.
    # Default: 0.8
    #confidence: 0.8

    # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md
    rules:
      # Rules ported from golint:
      - name: context-keys-type
      - name: time-naming
      - name: var-declaration
      - name: unexported-return
      - name: errorf
      - name: blank-imports
      - name: context-as-argument
      - name: dot-imports
      - name: error-return
      - name: error-strings
      - name: error-naming
      #- name: exported
        #arguments:
        #  - "checkPrivateReceivers"
        #  - "sayRepetitiveInsteadOfStutters"
      - name: increment-decrement
      - name: var-naming
        #arguments:
        #  - [ "ID" ] # AllowList
        #  - [ "VM" ] # DenyList
      - name: package-comments
      - name: range
      - name: receiver-naming
      - name: indent-error-flow

      # Rules not available in golint:
      #- name: add-constant
        #arguments:
        #  - maxLitCount: "3"
        #    allowStrs: '""'
        #    allowInts: "0,1,2"
        #    allowFloats: "0.0,0.,1.0,1.,2.0,2."
      #- name: argument-limit
        #arguments: [ 4 ]
      - name: atomic
      #- name: banned-characters
        #arguments: ["Ω","Σ","σ", "7"]
      #- name: bare-return
      - name: bool-literal-in-expr
      - name: call-to-gc
      #- name: cognitive-complexity
        #arguments: [ 15 ]
      #- name: confusing-naming
      - name: confusing-results
      - name: constant-logical-expr
      #- name: cyclomatic
        #arguments: [ 15 ]
      - name: deep-exit
      - name: defer
        # Options: call-chain, loop, method-call, recover, return.
        # By default all enabled.
        #arguments:
        #  - [ "call-chain", "loop" ]
      - name: duplicated-imports
      - name: early-return
      #- name: empty-block # See https://github.com/mgechev/revive/issues/386
      - name: empty-lines
      #- name: file-header
        #arguments:
        #  - This is the text that must appear at the top of source files.
      - name: flag-parameter
      #- name: function-length
        #arguments: [ 40, 60 ]
      #- name: function-result-limit
        #arguments: [ 3 ]
      - name: get-return
      - name: identical-branches
      - name: if-return
      - name: imports-blacklist
        #arguments:
        #  - "crypto/md5"
        #  - "crypto/sha1"
      #- name: import-shadowing # See https://github.com/mgechev/revive/issues/534
      #- name: line-length-limit
        #arguments: [ 80 ]
      #- name: max-public-structs
        #arguments: [ 3 ]
      - name: modifies-parameter
      - name: modifies-value-receiver
      #- name: nested-structs
      - name: optimize-operands-order
      - name: range-val-address
      - name: range-val-in-closure
      - name: redefines-builtin-id
      - name: string-of-int
      - name: string-format
        arguments:
          - - 'fmt.Errorf[0]'
            - '/(^|[^\.!?])$/'
            - must not end in punctuation
          - - 'panic'
            - '/^[^\n]*$/'
            - must not contain line breaks
      - name: struct-tag
      - name: superfluous-else
      - name: time-equal
      - name: unconditional-recursion
      - name: unexported-naming
      #- name: unhandled-error
        #arguments:
        #  - os.Setenv
        #  - os.Unsetenv
        #  - fmt.Print
        #  - fmt.Printf
        #  - fmt.Println
      - name: unnecessary-stmt
      - name: unreachable-code
      - name: unused-parameter
      - name: unused-receiver
      - name: useless-break
      - name: waitgroup-by-value

  rowserrcheck:
    packages:
      - github.com/jmoiron/sqlx
      - github.com/powerman/sqlxx

  staticcheck:
    # Select the Go version to target.
    # Default: 1.13
    go: "1.18"
    # https://staticcheck.io/docs/options#checks
    checks: [ "all" ]

  stylecheck:
    # Select the Go version to target.
    # Default: 1.13
    go: "1.18"
    # https://staticcheck.io/docs/options#checks
    checks: [ "all" ] # [ "all", "-ST1000", "-ST1003", "-ST1016", "-ST1020", "-ST1021", "-ST1022" ]
    # https://staticcheck.io/docs/options#dot_import_whitelist
    dot-import-whitelist:
      - fmt
    # https://staticcheck.io/docs/options#initialisms
    initialisms: [ "ACL", "API", "ASCII", "CPU", "CSS", "DNS", "EOF", "GUID", "HTML", "HTTP", "HTTPS", "ID", "IP", "JSON", "QPS", "RAM", "RPC", "SLA", "SMTP", "SQL", "SSH", "TCP", "TLS", "TTL", "UDP", "UI", "GID", "UID", "UUID", "URI", "URL", "UTF8", "VM", "XML", "XMPP", "XSRF", "XSS" ]
    # https://staticcheck.io/docs/options#http_status_code_whitelist
    http-status-code-whitelist: [ "200", "400", "404", "500" ]

  tagliatelle:
    # Check the struck tag name case.
    case:
      # Use the struct field name to check the name of the struct tag.
      # Default: false
      use-field-name: true
      rules:
        # Any struct tag type can be used.
        # Support string case: `camel`, `pascal`, `kebab`, `snake`, `goCamel`, `goPascal`, `goKebab`, `goSnake`, `upper`, `lower`
        json: snake
        yaml: kebab
        xml: camel
        bson: camel
        avro: snake
        mapstructure: kebab

  tenv:
    # The option `all` will run against whole test files (`_test.go`) regardless of method/function signatures.
    # By default, only methods that take `*testing.T`, `*testing.B`, and `testing.TB` as arguments are checked.
    #all: false

  testpackage:
    # regexp pattern to skip files
    skip-regexp: .*_internal_test\.go

  thelper:
    # The following configurations enable all checks.
    # All checks are enabled by default.
    test:
     first: true
     # name: true
     begin: true
    benchmark:
     first: true
     name: true
     begin: true
    tb:
     first: true
     name: true
     begin: true

  unparam:
    # Inspect exported functions.
    #
    # Set to true if no external program/library imports your code.
    # XXX: if you enable this setting, unparam will report a lot of false-positives in text editors:
    # if it's called for subdir of a project it can't find external interfaces. All text editor integrations
    # with golangci-lint call it on a directory with the changed file.
    #
    # Default: false
    #check-exported: false

  varcheck:
    # Check usage of exported fields and variables.
    # Default: false
    #exported-fields: false

  varnamelen:
    # The longest distance, in source lines, that is being considered a "small scope".
    # Variables used in at most this many lines will be ignored.
    # Default: 5
    #max-distance: 5
    # The minimum length of a variable's name that is considered "long".
    # Variable names that are at least this long will be ignored.
    # Default: 3
    #min-name-length: 3
    # Check method receiver names.
    # Default: false
    #check-receiver: false
    # Check named return values.
    # Default: false
    #check-return: true
    # Ignore "ok" variables that hold the bool return value of a type assertion.
    # Default: false
    #ignore-type-assert-ok: false
    # Ignore "ok" variables that hold the bool return value of a map index.
    # Default: false
    #ignore-map-index-ok: false
    # Ignore "ok" variables that hold the bool return value of a channel receive.
    # Default: false
    #ignore-chan-recv-ok: false
    # Optional list of variable names that should be ignored completely.
    # Default: []
    #ignore-names:
    #  - err
    # Optional list of variable declarations that should be ignored completely.
    # Entries must be in the form of "<variable name> <type>" or "<variable name> *<type>"
    # for variables, or "const <name>" for constants.
    # Default: []
    #ignore-decls:
    #  - c echo.Context
    #  - t testing.T
    #  - f *foo.Bar
    #  - e error
    #  - i int
    #  - const C

  whitespace:
    # Enforces newlines (or comments) after every multi-line if statement.
    # Default: false
    #multi-if: false
    # Enforces newlines (or comments) after every multi-line function signature.
    # Default: false
    #multi-func: false

  wrapcheck:
    # An array of strings that specify substrings of signatures to ignore.
    # If this set, it will override the default set of ignored signatures.
    # See https://github.com/tomarrell/wrapcheck#configuration for more information.
    ignoreSigs:
      #- .Errorf(
      #- errors.New(
      #- errors.Unwrap(
      #- .Wrap(
      #- .Wrapf(
      #- .WithMessage(
      #- .WithMessagef(
      #- .WithStack(
    ignoreSigRegexps:
      #- \.New.*Error\(
    ignorePackageGlobs:
      #- encoding/*
      #- github.com/pkg/*

  wsl:
    # See https://github.com/bombsimon/wsl/blob/master/doc/configuration.md for documentation of available settings.
    # These are the defaults for `golangci-lint`.

    # Controls if you may cuddle assignments and anything without needing an empty line between them.
    # Default: false
    #allow-assign-and-anything: false

    # Controls if you may cuddle assignments and calls without needing an empty line between them.
    # Default: true
    #allow-assign-and-call: true

    # Controls if you're allowed to cuddle multiple declarations.
    # This is false by default to encourage you to group them in one var block.
    # One major benefit with this is that if the variables are assigned the assignments will be tabulated.
    # Default: false
    #allow-cuddle-declarations: false

    # Controls if you may cuddle assignments even if they span over multiple lines.
    # Default: true
    #allow-multiline-assign: true

    # This option allows whitespace after each comment group that begins a block.
    # Default: false
    #allow-separated-leading-comment: false

    # Controls if blocks can end with comments.
    # This is not encouraged sine it's usually code smell but might be useful do improve understanding or learning purposes.
    # To be allowed there must be no whitespace between the comment and the last statement or the comment and the closing brace.
    # Default: false
    #allow-trailing-comment: false

    # Can be set to force trailing newlines at the end of case blocks to improve readability.
    # If the number of lines (including comments) in a case block exceeds this number
    # a linter error will be yielded if the case does not end with a newline.
    # Default: 0
    #force-case-trailing-whitespace: 0

    # Enforces that an `if` statement checking an error variable is cuddled
    # with the line that assigned that error variable.
    # Default: false
    #force-err-cuddling: false

    # Enforces that an assignment which is actually a short declaration (using `:=`)
    # is only allowed to cuddle with other short declarations, and not plain assignments, blocks, etc.
    # This rule helps make declarations stand out by themselves, much the same as grouping var statement.
    # Default: false
    #force-short-decl-cuddling: false

    # Controls if the checks for slice append should be "strict"
    # in the sense that it will only allow these assignments to be cuddled with variables being appended.
    # Default: true
    #strict-append: true

  # The custom section can be used to define linter plugins to be loaded at runtime.
  # See README documentation for more info.
  custom:
    # Each custom linter should have a unique name.
    #example:
      # The path to the plugin *.so. Can be absolute or local.
      # Required for each custom linter.
      #path: /path/to/example.so
      # The description of the linter.
      # Optional.
      #description: This is an example usage of a plugin linter.
      # Intended to point to the repo location of the linter.
      # Optional.
      #original-url: github.com/golangci/example-linter


linters:
  # Disable all linters.
  # Default: false
  #disable-all: false
  # Enable specific linter
  # https://golangci-lint.run/usage/linters/#enabled-by-default-linters
  #enable:
  #   - megacheck
  #   - govet

  # Enable all available linters.
  # Default: false
  enable-all: true
  # Disable specific linter
  # https://golangci-lint.run/usage/linters/#disabled-by-default-linters--e--enable
  disable:
    - cyclop          # prefer gocognit
    - dogsled         # questionable (assignment to how many blank identifiers is not okay?)
    - dupl
    - forcetypeassert # questionable (often we actually want panic)
    - gocyclo         # prefer gocognit
    - golint          # deprecated (replaced by revive)
    - ifshort         # questionable (short `if` often makes code harder to read)
    - interfacer      # deprecated
    - ireturn         # questionable (is returning unexported types better?)
    - lll             # questionable (sometimes long lines improve readability)
    - maligned        # deprecated (replaced by govet 'fieldalignment')
    - nlreturn        # questionable (often no blank line before return improve readability)
    - paralleltest
    - scopelint       # deprecated (replaced by exportloopref)
    - varnamelen
    - wrapcheck       # questionable (see https://github.com/tomarrell/wrapcheck/issues/1)
    - wsl             # questionable (too much style differences, hard to consider)

  # Enable presets.
  # https://golangci-lint.run/usage/linters
  #presets:
  #   - bugs
  #  - comment
  #  - complexity
  #  - error
  #  - format
  #  - import
  #  - metalinter
  #  - module
  #  - performance
  #  - sql
  #  - style
  #  - test
  #   - unused

  # Run only fast linters from enabled linters set (first run won't be fast)
  # Default: false
  #fast: false


issues:
  # List of regexps of issue texts to exclude.
  #
  # But independently of this option we use default exclude patterns,
  # it can be disabled by `exclude-use-default: false`.
  # To list all excluded by default patterns execute `golangci-lint run --help`
  #
  # Default: []
  exclude:
    - "declaration of \"(log|err|ctx)\" shadows"
    - "missing cases in switch of type \\S+: \\S+_UNSPECIFIED$"
    # - "Potential file inclusion via variable" # [DEFAULT] gosec: False positive is triggered by 'src, err := ioutil.ReadFile(filename)'

  # Excluding configuration per-path, per-linter, per-text and per-source
  exclude-rules:
    # Exclude some linters from running on tests files.
    - path: _test\.go|testing(_.*)?\.go
      linters:
        - bodyclose
        - dupl
        - errcheck
        - forcetypeassert
        - funlen
        - gochecknoglobals
        - gochecknoinits
        - gocognit
        - goconst
        - gosec
        - maintidx
        - maligned

    - linters: gochecknoglobals
      source: "const"

    - path: _test\.go|testing(_.*)?\.go
      text: "(unnamedResult|exitAfterDefer|rangeValCopy|unnecessaryBlock)"
      linters:
        - gocritic

    - path: _test\.go
      text: '"t" shadows'
      linters:
        - govet

    # Files with go:embed directives are designed to contain global constants.
    - path: ^(.*/)?embed.go$
      linters:
        - gochecknoglobals

    # Exclude known linters from partially hard-vendored code,
    # which is impossible to exclude via `nolint` comments.
    #- path: internal/hmac/
    #   text: "weak cryptographic primitive"
    #   linters:
    #     - gosec

    # Exclude some `staticcheck` messages.
    #- linters:
    #     - staticcheck
    #   text: "SA9003:"

    # Exclude `lll` issues for long lines with `go:generate`.
    #- linters:
    #     - lll
    #   source: "^//go:generate "

  # Independently of option `exclude` we use default exclude patterns,
  # it can be disabled by this option.
  # To list all excluded by default patterns execute `golangci-lint run --help`.
  # Default: true.
  exclude-use-default: false

  # If set to true exclude and exclude-rules regular expressions become case-sensitive.
  # Default: false
  #exclude-case-sensitive: false

  # The list of ids of default excludes to include or disable.
  # Default: []
  include:
    #- EXC0002 # disable excluding of issues about comments from golint.

  # Maximum issues count per one linter.
  # Set to 0 to disable.
  # Default: 50
  max-issues-per-linter: 0

  # Maximum count of issues with the same text.
  # Set to 0 to disable.
  # Default: 3
  max-same-issues: 0

  # Show only new issues: if there are unstaged changes or untracked files,
  # only those changes are analyzed, else only changes in HEAD~ are analyzed.
  # It's a super-useful option for integration of golangci-lint into existing large codebase.
  # It's not practical to fix all existing issues at the moment of integration:
  # much better don't allow issues in new code.
  #
  # Default: false.
  #new: false

  # Show only new issues created after git revision `REV`.
  #new-from-rev: HEAD

  # Show only new issues created in git patch with set file path.
  #new-from-patch: path/to/patch/file

  # Fix found issues (if it's supported by the linter).
  fix: false


severity:
  # Set the default severity for issues.
  #
  # If severity rules are defined and the issues do not match or no severity is provided to the rule
  # this will be the default severity applied.
  # Severities should match the supported severity names of the selected out format.
  # - Code climate: https://docs.codeclimate.com/docs/issues#issue-severity
  # -   Checkstyle: https://checkstyle.sourceforge.io/property_types.html#severity
  # - GitHub: https://help.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-an-error-message
  #
  # Default value is an empty string.
  default-severity: error

  # If set to true `severity-rules` regular expressions become case-sensitive.
  # Default: false
  #case-sensitive: false

  # When a list of severity rules are provided, severity information will be added to lint issues.
  # Severity rules have the same filtering capability as exclude rules
  # except you are allowed to specify one matcher per severity rule.
  # Only affects out formats that support setting severity information.
  #
  # Default: []
  rules:
    #- linters:
    #  - dupl
    #  severity: info
